dataF$Workclass = factor(data$Workclass)
dataF$Age = factor(data$Age)
first.forest <- randomForest(Salary ~ Age + Workclass, data=dataF)
fancyRpartPlot(first.forest)
first.forest <- randomForest(Salary ~ Race + Workclass, data=dataF, method='class')
fancyRpartPlot(first.forest)
forestFit <- randomForest(as.factor(Salary) ~ Race + Workclass, data=dataF,
importance=TRUE, ntree=2000)
#fancyRpartPlot(forestFit)
varImpPlot(forestFit)
forestFit <- randomForest(as.factor(Salary) ~ Race + Workclass, data=dataF,
importance=TRUE, ntree=2000)
#fancyRpartPlot(forestFit)
varImpPlot(forestFit)
forestFit <- randomForest(as.factor(Salary) ~ Race + Workclass, data=dataF,
importance=TRUE, ntree=2000)
#fancyRpartPlot(forestFit)
varImpPlot(forestFit)
forestFit <- randomForest(as.factor(Salary) ~ Age + Sex + Education + Educationyrs +
Race + Workclass, data=dataF, importance=TRUE, ntree=2000)
#fancyRpartPlot(forestFit)
varImpPlot(forestFit)
forestFit <- randomForest(as.factor(Salary) ~ Age + Sex + Education + Educationyrs +
Race + Workclass, data=dataF, importance=TRUE, ntree=2000)
#fancyRpartPlot(forestFit)
varImpPlot(forestFit)
forestFit <- randomForest(as.factor(Salary) ~ Age + Sex + Education + Educationyrs +
Race + Workclass, data=dataF, importance=TRUE, ntree=2000)
#fancyRpartPlot(forestFit)
varImpPlot(forestFit)
#Forests
forestFit <- randomForest(as.factor(Salary) ~ Age + Sex + Education +
Race + Workclass, data=dataF, importance=TRUE, ntree=2000)
#fancyRpartPlot(forestFit)
varImpPlot(forestFit)
#Forests
forestFit <- randomForest(as.factor(Salary) ~ Age + Sex + Education +
Race + Workclass, data=dataF, importance=TRUE, ntree=2000)
#fancyRpartPlot(forestFit)
varImpPlot(forestFit)
#Forests
forestFit <- randomForest(as.factor(Salary) ~ Age + Sex + Education +
Race, data=dataF, importance=TRUE, ntree=2000)
#fancyRpartPlot(forestFit)
varImpPlot(forestFit)
#Forests
forestFit <- randomForest(as.factor(Salary) ~ Age + Sex + Education +
Race, data=dataF, importance=TRUE, ntree=2000)
#fancyRpartPlot(forestFit)
varImpPlot(forestFit)
#Forests
forestFit <- randomForest(as.factor(Salary) ~ as.numeric(Age) + Sex + Education +
Race, data=dataF, importance=TRUE, ntree=2000)
#fancyRpartPlot(forestFit)
varImpPlot(forestFit)
#Forests
forestFit <- randomForest(as.factor(Salary) ~ as.numeric(as.character(Age)) + Sex + Education +
Race, data=dataF, importance=TRUE, ntree=2000)
#fancyRpartPlot(forestFit)
varImpPlot(forestFit)
#Forests
forestFit <- randomForest(as.factor(Salary) ~ Sex + Education +
Race, data=dataF, importance=TRUE, ntree=2000)
#fancyRpartPlot(forestFit)
varImpPlot(forestFit)
forestFit <- randomForest(as.factor(Salary) ~ Race + Education + Workclass, data=dataF,
importance=TRUE, ntree=2000)
#fancyRpartPlot(forestFit)
varImpPlot(forestFit)
#Forests
forestFit <- randomForest(as.factor(Salary) ~ Race + Workclass, data=dataF,
importance=TRUE, ntree=2000)
#fancyRpartPlot(forestFit)
varImpPlot(forestFit)
forestFit <- randomForest(as.factor(Salary) ~ Race + Workclass, data=dataF,
importance=TRUE, ntree=2000)
fancyRpartPlot(forestFit)
varImpPlot(forestFit)
forestFit <- randomForest(as.factor(Salary) ~ Age + Race, data=dataF,
importance=TRUE, ntree=2000)
#fancyRpartPlot(forestFit)
varImpPlot(forestFit)
?randomForest
#Forests
forestFit <- randomForest(as.factor(Salary) ~ Age + Race, data=dataF,
importance=TRUE, ntree=2000, maxnodes=10, mtry=20)
#fancyRpartPlot(forestFit)
varImpPlot(forestFit)
fit1 <- rpart(Salary ~ Age + Sex + Education + Workclass + Workhours, data=dataF, method='class')
fancyRpartPlot(fit1)
#Salary Pred
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(data.table)
library(randomForest)
dataF <- censusData_train
colnames(dataF) <- c("Age", "Workclass", "Census-fw", "Education", "Educationyrs",
"Marital-status", "Occupation", "Relationship", "Race", "Sex",
"Captital-gain", "Capital-loss", "Workhours", "Country", "Salary")
setDT(dataF)[Education == "Masters" | Education == "Bachelors", Education := "Higher"]
setDT(dataF)[Education == "Doctorate" | Education == "Assoc-acdm", Education := "Higher"]
setDT(dataF)[Education == "Assoc-voc" | Education == "Prof-school", Education := "Higher"]
setDT(dataF)[Education != "Higher", Education := "Lower"]
#Bodge it for randomforest
setDT(dataF)[Occupation == "?", Occupation := "Other"]
setDT(dataF)[Workclass == "?", Workclass := "Private"]
setDT(dataF)[Country == "?", Country := "Unknown"]
fit1 <- rpart(Salary ~ Age + Sex + Education + Workclass + Workhours, data=dataF, method='class')
fancyRpartPlot(fit1)
fit1 <- rpart(Salary ~ Age + Sex + Education + Workclass + Workhours, data=dataF, method='class')
fancyRpartPlot(fit1)
fit2 <- rpart(Salary ~ Age + Education + Workclass + Country, data=dataF, method='class',
control=rpart.control(minsplit=100, cp=0.005))
fancyRpartPlot(fit2)
fit3 <- rpart(Salary ~ Race + Educationyrs + Workclass, data=dataF, method='class',
control=rpart.control(minsplit=100, cp=0.005))
fancyRpartPlot(fit3)
fit1 <- rpart(Salary ~ Age + Sex + Education + Workclass + Workhours, data=dataF, method='class')
fancyRpartPlot(fit1)
fit2 <- rpart(Salary ~ Age + Education + Workclass + Country, data=dataF, method='class',
control=rpart.control(minsplit=100, cp=0.005))
fancyRpartPlot(fit2)
fit3 <- rpart(Salary ~ Race + Educationyrs + Workclass, data=dataF, method='class',
control=rpart.control(minsplit=100, cp=0.005))
fancyRpartPlot(fit3)
fit3 <- rpart(Salary ~ Race + Educationyrs + Workclass, data=dataF, method='class',
control=rpart.control(minsplit=100, cp=0.005))
fancyRpartPlot(fit3)
fit3 <- rpart(Salary ~ Race + Educationyrs + Workclass, data=dataF, method='class',
control=rpart.control(minsplit=100, cp=0.005))
fancyRpartPlot(fit3)
fit2 <- rpart(Salary ~ Age + Education + Workclass + Country, data=dataF, method='class',
control=rpart.control(minsplit=100, cp=0.005))
fancyRpartPlot(fit2)
fit1 <- rpart(Salary ~ Age + Sex + Education + Workclass + Workhours, data=dataF, method='class')
fancyRpartPlot(fit1)
fit1 <- rpart(Salary ~ Age + Sex + Education + Workhours, data=dataF, method='class')
fancyRpartPlot(fit1)
fit1 <- rpart(Salary ~ Age + Sex + Education + Workhours, data=dataF, method='class')
fancyRpartPlot(fit1)
fit1 <- rpart(Salary ~ Age + Sex + Education + Workhours, data=dataF, method='class')
fancyRpartPlot(fit1)
fit2 <- rpart(Salary ~ Age + Education + Workclass + Country, data=dataF, method='class',
control=rpart.control(minsplit=100, cp=0.005))
fancyRpartPlot(fit2)
fit3 <- rpart(Salary ~ Race + Educationyrs + Workclass, data=dataF, method='class',
control=rpart.control(minsplit=100, cp=0.005))
fancyRpartPlot(fit3)
library(readr)
train <- read_csv("~/GitHub/QA_R/HousePrices/train.csv")
View(train)
#Kaggle House Prices
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(data.table)
library(randomForest)
dataF <- train
fit1 <- rpart(SalePrice ~ GarageType + Heating, data=dataF, method='class')
fancyRpartPlot(fit1)
dataF <- train
fit1 <- rpart(SalePrice ~ SaleType, data=dataF, method='class')
fancyRpartPlot(fit1)
source('~/.active-rstudio-document')
#Kaggle House Prices
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(data.table)
library(randomForest)
dataF <- train
fit1 <- rpart(SalePrice ~ SaleType + HouseStyle + OverallQual, data=dataF, method='class')
fancyRpartPlot(fit1)
fit1 <- rpart(SalePrice ~ SaleType + HouseStyle + OverallQual + LotConfig + Neighborhood, data=dataF, method='class')
fancyRpartPlot(fit1)
plot(fit1)
fit1 <- rpart(SalePrice ~ HouseStyle + OverallQual + LotConfig + Neighborhood, data=dataF, method='class')
fancyRpartPlot(fit1)
dataF <- train
fit1 <- rpart(SalePrice ~ HouseStyle + LotArea + LotConfig, data=dataF, method='class')
fancyRpartPlot(fit1)
fit1
dataF <- train
fit1 <- rpart(SalePrice ~ LotArea + LotConfig, data=dataF, method='class')
fancyRpartPlot(fit1)
fit1
dataF <- train
fit1 <- rpart(LotArea ~ SalePrice + HouesStyle + LotConfig, data=dataF, method='class')
fancyRpartPlot(fit1)
fit1 <- rpart(SalePrice ~ HouesStyle + LotConfig, data=dataF, method='class')
fancyRpartPlot(fit1)
fit1 <- rpart(SalePrice ~ HouesStyle + MSZoning + BldgType, data=dataF, method='class')
fancyRpartPlot(fit1)
fit1 <- rpart(SalePrice ~ HouesStyle + MSZoning + BldgType, data=dataF, method='class')
fancyRpartPlot(fit1)
fit1 <- rpart(SalePrice ~ HouesStyle + MSZoning + BldgType, data=dataF, method='class')
fancyRpartPlot(fit1)
fit1 <- rpart(SalePrice ~ HouesStyle + MSZoning + BldgType, data=dataF, method='class')
fancyRpartPlot(fit1)
fit1 <- rpart(SalePrice ~ HouesStyle + MSZoning + BldgType, data=dataF, method='class')
fancyRpartPlot(fit1)
fit1 <- rpart(SalePrice ~ HouesStyle + MSZoning + BldgType, data=dataF, method='class')
fancyRpartPlot(fit1)
fit1 <- rpart(SalePrice ~ HouesStyle + MSZoning + BldgType, data=dataF, method='class')
fancyRpartPlot(fit1)
fit1 <- rpart(SalePrice ~ HouesStyle + MSZoning + BldgType, data=dataF, method='class')
fancyRpartPlot(fit1)
fit1 <- rpart(SalePrice ~ HouesStyle + MSZoning + BldgType, data=dataF, method='class')
fancyRpartPlot(fit1)
fit1 <- rpart(SalePrice ~ HouesStyle + MSZoning + BldgType, data=dataF, method='class')
fancyRpartPlot(fit1)
fit1 <- rpart(SalePrice ~ HouesStyle + MSZoning + BldgType, data=dataF, method='class')
fancyRpartPlot(fit1)
fit1 <- rpart(SalePrice ~ MSZoning + BldgType, data=dataF, method='class')
plot(fit1)
fit``
fit1
dataF <- train
fit1 <- rpart(SalePrice ~ BldgType, data=dataF, method='class')
fancyRpartPlot(fit1)
dataF <- train
fit1 <- rpart(SalePrice ~ MSSubClass + LotArea, data=dataF, method='class')
fancyRpartPlot(fit1)
dataF <- train
fit1 <- rpart(SalePrice ~ as.factor(MSSubClass) + LotArea, data=dataF, method='class')
fancyRpartPlot(fit1)
dataF <- train
fit1 <- rpart(SalePrice ~ as.factor(MSSubClass) + MSZoning + LotArea, data=dataF, method='class')
fancyRpartPlot(fit1)
#Kaggle House Prices
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(data.table)
library(randomForest)
dataF <- train
fit1 <- rpart(SalePrice ~ as.factor(MSSubClass) + MSZoning + LotArea, data=dataF, method='class' +
control=rpart.control(minsplit=2, cp=0.001))
fancyRpartPlot(fit1)
dataF <- train
fit1 <- rpart(SalePrice ~ as.factor(MSSubClass) + MSZoning + LotArea, data=dataF, method='class' +
control=rpart.control(minsplit=2, cp=0.001))
fancyRpartPlot(fit1)
dataF <- train
fit1 <- rpart(SalePrice ~ MSSubClass + MSZoning + LotArea, data=dataF, method='class' +
control=rpart.control(minsplit=2, cp=0.001))
fancyRpartPlot(fit1)
dataF <- train
fit1 <- rpart(SalePrice ~ MSSubClass + MSZoning + LotArea, data=dataF, method='class' +
control=rpart.control(minsplit=2, cp=0.001))
fancyRpartPlot(fit1)
dataF <- train
fit1 <- rpart(SalePrice ~ as.factor(MSSubClass) + MSZoning + LotArea, data=dataF, method='class',
control=rpart.control(minsplit=2, cp=0.001))
fancyRpartPlot(fit1)
fit1 <- rpart(SalePrice ~ LotArea, data=dataF, method='class',
control=rpart.control(minsplit=2, cp=0.001))
fancyRpartPlot(fit1)
fit1 <- rpart(SalePrice ~ LotArea, data=dataF, method='class',
control=rpart.control(minsplit=10, cp=0.001))
fancyRpartPlot(fit1)
dataF <- train
fit1 <- rpart(SalePrice ~ LotArea, data=dataF, method='class',
control=rpart.control(minsplit=100, cp=0.001))
fancyRpartPlot(fit1)
#Kaggle House Prices
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(data.table)
library(randomForest)
dataF <- train
fit1 <- rpart(SalePrice ~ LotArea, data=dataF, method='class',
control=rpart.control(minsplit=500, cp=0.001))
fancyRpartPlot(fit1)
dataF <- train
fit1 <- rpart(SalePrice ~ as.factor(MSSubClass) + LotArea, data=dataF, method='class',
control=rpart.control(minsplit=500, cp=0.001))
fancyRpartPlot(fit1)
library(readr)
test <- read_csv("~/GitHub/QA_R/HousePrices/test.csv")
View(test)
predict(fit1, test)
dataF <- train
fit1 <- rpart(SalePrice ~ MSSubClass + LotArea, data=dataF, method='class',
control=rpart.control(minsplit=500, cp=0.001))
fancyRpartPlot(fit1)
predict(fit1, test)
pred <- predict(fit1, data=test)
write.csv(pred, "test_res.csv")
dataF <- train
fit1 <- rpart(SalePrice ~ MSSubClass + LotArea + Neighborhood, data=dataF, method='class',
control=rpart.control(minsplit=500, cp=0.001))
fancyRpartPlot(fit1)
#Kaggle House Prices
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(data.table)
library(randomForest)
dataF <- train
fit1 <- rpart(SalePrice ~ MSSubClass + LotArea + Neighborhood, data=dataF, method='class',
control=rpart.control(minsplit=50, cp=0.001))
fancyRpartPlot(fit1)
#Kaggle House Prices
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(data.table)
library(randomForest)
dataF <- train
fit1 <- rpart(SalePrice ~ MSSubClass + LotArea + Neighborhood + BldgType, data=dataF, method='class',
control=rpart.control(minsplit=50, cp=0.001))
fancyRpartPlot(fit1)
fit1
pred <- predict(fit1, data=test)
View(pred)
View(pred)
print(predict(fit1, data=test. type='class'))
print(predict(fit1, data=test, type='class'))
print(predict(fit1, data=test, type='class'))
pred <- predict(fit1, data=test, type='class')
write.csv(pred, "test_res.csv")
print(predict(fit1, data=test, type='class'))
pred <- predict(fit1, data=test, type='class')
write.csv(pred, "test_res.csv")
print(predict(fit1, data=test, type='class'))
pred <- predict(fit1, data=test, type='class')
write.csv(pred, "test_res2.csv")
fit1 <- rpart(SalePrice ~ MSSubClass + LotArea + Neighborhood + BldgType, data=dataF, method='class',
control=rpart.control(minsplit=25, cp=0.002))
pred <- predict(fit1, data=test, type='class')
write.csv(pred, "test_res3.csv")
fit2 <- rpart(SalePrice ~ BldgType + OverallQual + LotArea + Neighborhood, data=dataF, method='class',
control=rpart.control(minsplit=25, cp=0.002))
pred <- predict(fit1, data=test, type='class')
write.csv(pred, "test_res4.csv") #OverallQual
#Kaggle House Prices
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(data.table)
library(randomForest)
dataF <- train
library(readr)
train <- read_csv("~/GitHub/QA_R/HousePrices/train.csv")
View(train)
#Kaggle House Prices
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(data.table)
library(randomForest)
dataF <- train
dataF$OverallCond <- dataF$OverallCond + dataF$OverallQual
setDT(dataF)[OverallCond != "", OverallCond := (OverallCond + OverallQual)]
fit3 <- rpart(SalePrice ~ GarageCars + YrSold + LotConfig + HouseStyle + BuildingType + OverallQual,
data=dataF, method='class', control=rpart.control(minsplit=25, cp=0.002))
fit3 <- rpart(SalePrice ~ GarageCars + YrSold + LotConfig + HouseStyle + BldgType + OverallQual,
data=dataF, method='class', control=rpart.control(minsplit=25, cp=0.002))
fit3
#Kaggle House Prices
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(data.table)
library(randomForest)
dataF <- train
fit3 <- rpart(SalePrice ~ GarageCars + YrSold + LotConfig + HouseStyle + BldgType + OverallQual,
data=dataF, method='class', control=rpart.control(minsplit=25, cp=0.002))
print(predict(fit1, data=test, type='class'))
print(predict(fit3, data=test, type='class'))
pred <- predict(fit3, data=test, type='class')
write.csv(pred, "test_res5.csv")
fit3 <- rpart(SalePrice ~ GarageCars + MSSubClass + LotArea,
data=dataF, method='class', control=rpart.control(minsplit=35, cp=0.002))
fit3 <- rpart(SalePrice ~ GarageCars + MSSubClass + LotArea,
data=dataF, method='class', control=rpart.control(minsplit=35, cp=0.002))
print(predict(fit3, data=test, type='class'))
pred <- predict(fit3, data=test, type='class')
write.csv(pred, "test_res6.csv")
fit3 <- rpart(SalePrice ~ GarageCars + MSSubClass + LotArea,
data=dataF, method='anova', control=rpart.control(minsplit=35, cp=0.002))
print(predict(fit3, data=test, type='class'))
fit3 <- rpart(SalePrice ~ GarageCars + MSSubClass + LotArea,
data=dataF, method='anova', control=rpart.control(minsplit=35, cp=0.002))
fit3
print(predict(fit3, data=test, type='anova'))
print(predict(fit3, data=test, type='prob'))
fit3 <- rpart(SalePrice ~ GarageCars + MSSubClass + HouseStyle + LotArea + GarageType,
data=dataF, method='class', control=rpart.control(minsplit=40, cp=0.005))
fit3 <- rpart(SalePrice ~ GarageCars + MSSubClass + HouseStyle + LotArea + GarageType,
data=dataF, method='class', control=rpart.control(minsplit=40, cp=0.005))
print(predict(fit3, data=test, type='class'))
fit3 <- rpart(SalePrice ~ GarageCars + MSSubClass + HouseStyle + LotArea + GarageType,
data=dataF, method='class', control=rpart.control(minsplit=20, cp=0.002))
print(predict(fit3, data=test, type='class'))
print(predict(fit3, data=test, type='class'))
pred <- predict(fit3, data=test, type='class')
write.csv(pred, "test_res6.csv") #OverallQual
print(predict(fit3, data=test, type='class'))
pred <- predict(fit3, data=test, type='class')
write.csv(pred, "test_res7.csv") #OverallQual
#Kaggle House Prices
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(data.table)
library(randomForest)
dataF <- train
dataF$MSSubClass <- as.factor(dataF$MSSubClass)
dataF$MSSubClass <- revalue(dataF$MSSubClass, c("30"="20","50"="45","70"="60","85"="80","150"="120","180"="160"))
dataF$MSSubClass <- revalue(dataF$MSSubClass, c("40"="20","75"="60"))
#Kaggle House Prices
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(data.table)
library(randomForest)
dataF <- train
dataF$MSSubClass <- as.factor(dataF$MSSubClass)
dataF$MSSubClass <- revalue(dataF$MSSubClass, c("30"="20","50"="45","70"="60","85"="80","150"="120","180"="160"))
dataF$MSSubClass <- revalue(dataF$MSSubClass, c("40"="20","75"="60"))
dataF$MSSubClass <- as.factor(dataF$MSSubClass)
dataF$MSSubClass <- revalue(dataF$MSSubClass, c("30"="20","50"="45","70"="60","85"="80","150"="120","180"="160"))
dataF$MSSubClass <- revalue(dataF$MSSubClass, c("40"="20","75"="60"))
#house_prices_forest
library(plyr)
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(data.table)
library(randomForest)
dataF <- train
dataF$MSSubClass <- as.factor(dataF$MSSubClass)
dataF$MSSubClass <- revalue(dataF$MSSubClass, c("30"="20","50"="45","70"="60","85"="80","150"="120","180"="160"))
dataF$MSSubClass <- revalue(dataF$MSSubClass, c("40"="20","75"="60"))
set.seed(415)
forestFit <- randomForest(SalePrice ~ MSSubClass + Neighborhood + BldgType, data=dataF,
importance=TRUE, ntree=2000)
#randomforest
set.seed(415)
forestFit <- randomForest(SalePrice ~ as.factor(MSSubClass) + as.factor(Neighborhood) + as.factor(BldgType), data=dataF,
importance=TRUE, ntree=2000)
#house_prices_forest
library(plyr)
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(data.table)
library(randomForest)
dataF <- train
dataF$MSSubClass <- as.factor(dataF$MSSubClass)
dataF$MSSubClass <- revalue(dataF$MSSubClass, c("30"="20","50"="45","70"="60","85"="80","150"="120","180"="160"))
dataF$MSSubClass <- revalue(dataF$MSSubClass, c("40"="20","75"="60"))
#house_prices_forest
library(plyr)
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(data.table)
library(randomForest)
dataF <- train
dataF$MSSubClass <- as.factor(dataF$MSSubClass)
dataF$MSSubClass <- revalue(dataF$MSSubClass, c("30"="20","50"="45","70"="60","85"="80","150"="120","180"="160"))
dataF$MSSubClass <- revalue(dataF$MSSubClass, c("40"="20","75"="60"))
#randomforest
set.seed(415)
forestFit <- randomForest(SalePrice ~ as.factor(MSSubClass) + as.factor(Neighborhood) + as.factor(BldgType), data=dataF,
importance=TRUE, ntree=2000)
#house_prices_forest
library(plyr)
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(data.table)
library(randomForest)
dataF <- train
dataF$MSSubClass <- as.factor(dataF$MSSubClass)
dataF$MSSubClass <- revalue(dataF$MSSubClass, c("30"="20","50"="45","70"="60","85"="80","150"="120","180"="160"))
dataF$MSSubClass <- revalue(dataF$MSSubClass, c("40"="20","75"="60"))
#randomforest
set.seed(415)
forestFit <- randomForest(SalePrice ~ MSSubClass + as.factor(Neighborhood) + as.factor(BldgType), data=dataF,
importance=TRUE, ntree=2000)
getwd()
setwd("C:/Users/Administrator/Documents/GitHub/QA_R/HousePrices/")
dataF <- read.csv("train.csv")
dataF$MSSubClass <- as.factor(dataF$MSSubClass)
dataF$MSSubClass <- revalue(dataF$MSSubClass, c("30"="20","50"="45","70"="60","85"="80","150"="120","180"="160"))
dataF$MSSubClass <- revalue(dataF$MSSubClass, c("40"="20","75"="60"))
#randomforest
set.seed(415)
forestFit <- randomForest(SalePrice ~ MSSubClass + as.factor(Neighborhood) + as.factor(BldgType), data=dataF,
importance=TRUE, ntree=2000)
