} else {
return(inp1 * inp2)
}
}
cond2(0,4, FALSE)
condFunc2 <- function(inp1, inp2, bool)
{
if(inp1 = 0) | (inp2 = 0){
return(inp1 + inp2)
} else if(bool){
return(inp1 + inp2)
} else {
return(inp1 * inp2)
}
}
condFunc2(0,4, FALSE)
condFunc2 <- function(inp1, inp2, bool)
{
if(inp1 == 0) | (inp2 == 0){
return(inp1 + inp2)
} else if(bool){
return(inp1 + inp2)
} else {
return(inp1 * inp2)
}
}
condFunc2(0,4, FALSE)
condFunc2 <- function(inp1, inp2, bool)
{
if(inp1 == 0) | (inp2 == 0){
return(inp1 + inp2)
} else if(bool){
return(inp1 + inp2)
} else {
return(inp1 * inp2)
}
}
condFunc2(0,4, FALSE)
condFunc2 <- function(inp1, inp2, bool)
{
if(inp1 == 0) | (inp2 == 0){
return(inp1 + inp2)
} else if(bool){
return(inp1 + inp2)
} else {
return(inp1 * inp2)
}
}
condFunc2(4,4, FALSE)
condFunc2 <- function(inp1, inp2, bool)
{
if((inp1 == 0) | (inp2 == 0)){
return(inp1 + inp2)
} else if(bool){
return(inp1 + inp2)
} else {
return(inp1 * inp2)
}
}
condFunc2(4,4, FALSE)
condFunc2 <- function(inp1, inp2, bool)
{
if((inp1 == 0) | (inp2 == 0)){
return(inp1 + inp2)
} else if(bool){
return(inp1 + inp2)
} else {
return(inp1 * inp2)
}
}
condFunc2(0,4, FALSE)
condFunc2 <- function(inp1, inp2, bool)
{
if((inp1 == 0) | (inp2 == 0)){
return(inp1 + inp2)
} else if(bool){
return(inp1 + inp2)
} else {
return(inp1 * inp2)
}
}
condFunc2(0,4, TRUE)
recursion <- function(inp)
{
output = c()
for(i in 1:11){
output[i] <- condFunc2(i, inp, FALSE)
}
return(output)
}
recursion(3)
anon(function(x){x[[1]]}, recursion(3))
anon <- function(x){x[[1]]}, recursion(3)
anon <- function(func, data){
func(data)
}
anon <- (function(x){x[[1]]}, recursion(3))
anon <- function(func, data){
func(data)
}
anon(function(x){x[[1]]}, recursion(3))
anon <- function(func, data){
func(data)
}
anon(function(x){x[[6]]}, recursion(3))
blackjack <- function(input1, input2)
{
if((input1 > 21) & (input2 > 21)){
return(0)
} else if(input1 > 21){
return(input2)
} else if(input2 > 21){
return(input1)
} else if(input1 > input2){
return(input1)
} else if(input2 > input1){
return(input2)
} else {
return(0)
}
}
blackjack(20,14)
#Blackjack
blackjack <- function(input1, input2)
{
if((input1 > 21) & (input2 > 21)){
return(0)
} else if(input1 > 21){
return(input2)
} else if(input2 > 21){
return(input1)
} else if(input1 > input2){
return(input1)
} else if(input2 > input1){
return(input2)
} else {
return(0)
}
}
blackjack(22,14)
#Unique sum
uniquesum <- function(input1, input2, input3)
{
numbers <- set(input1, input2, input3)
return(numbers)
}
uniquesum(1,2,3)
#Unique sum
uniquesum <- function(input1, input2, input3)
{
numbers <- as.set(input1, input2, input3)
return(numbers)
}
uniquesum(1,2,3)
#Unique sum
uniquesum <- function(input1, input2, input3)
{
numbers <- c(input1, input2, input3)
return(numbers)
}
uniquesum(1,2,3)
#Unique sum
uniquesum <- function(input1, input2, input3)
{
numbers <- c(input1, input2, input3)
return(numbers)
}
uniquesum(1,1,3)
#Unique sum
uniquesum <- function(input1, input2, input3)
{
numbers <- c(input1, input2, input3)
return(sum(numbers))
}
uniquesum(1,1,3)
#Unique sum
uniquesum <- function(input1, input2, input3)
{
numbers <- c(input1, input2, input3)
return(sum(numbers.uniqueified))
}
uniquesum(1,1,3)
uniquesum <- function(input1, input2, input3)
{
numbers <- set(input1, input2, input3)
return(sum(numbers))
}
uniquesum(1,1,3)
#Unique sum
uniquesum <- function(input1, input2, input3)
{
numbers <- cset(input1, input2, input3)
return(sum(numbers))
}
uniquesum(1,1,3)
set("test","test")
#Unique sum
uniquesum <- function(input1, input2, input3)
{
numbers <- cset(input1, input2, input3)
return(unique(numbers))
}
uniquesum(1,1,3)
#Unique sum
uniquesum <- function(input1, input2, input3)
{
numbers <- cset(input1, input2, input3)
return(unique(numbers))
}
uniquesum(1,1,3)
#Unique sum
uniquesum <- function(input1, input2, input3)
{
numbers <- cset(input1, input2, input3)
return(unique(numbers))
}
uniquesum(1,1,3)
#Unique sum
uniquesum <- function(input1, input2, input3)
{
numbers <- cset(input1, input2, input3)
return(unique(numbers))
}
uniquesum(1,1,3)
#Unique sum
uniquesum <- function(input1, input2, input3)
{
numbers <- c(input1, input2, input3)
return(unique(numbers))
}
uniquesum(1,1,3)
uniquesum <- function(input1, input2, input3)
{
numbers <- c(input1, input2, input3)
return(sum(unique(numbers)))
}
uniquesum(1,1,3)
#Too hot
toohot <- function(temp, summer)
{
if(summer){
if(temp >= 60) && (temp <= 100){
return(TRUE)
} else {
return(FALSE)
}
} else {
if(temp >= 60) && (temp <= 90){
return(TRUE)
} else {
return(FALSE)
}
}
}
toohot(90, TRUE)
#Too hot
toohot <- function(temp, summer)
{
if(summer){
if((temp >= 60) && (temp <= 100)){
return(TRUE)
} else {
return(FALSE)
}
} else {
if((temp >= 60) && (temp <= 90)){
return(TRUE)
} else {
return(FALSE)
}
}
}
toohot(90, TRUE)
#Too hot
toohot <- function(temp, summer)
{
if(summer){
if((temp >= 60) && (temp <= 100)){
return(TRUE)
} else {
return(FALSE)
}
} else {
if((temp >= 60) && (temp <= 90)){
return(TRUE)
} else {
return(FALSE)
}
}
}
toohot(91, TRUE)
#Too hot
toohot <- function(temp, summer)
{
if(summer){
if((temp >= 60) && (temp <= 100)){
return(TRUE)
} else {
return(FALSE)
}
} else {
if((temp >= 60) && (temp <= 90)){
return(TRUE)
} else {
return(FALSE)
}
}
}
toohot(91, FALSE)
#Leap year
leapyear <- function(year)
{
if(year %% 4 == 0){
if((year %% 400 == 0) || (year %% 100 != 0)){
return(TRUE)
} else{
return(FALSE)
}
} else {
return(FALSE)
}
}
leapyear(2004)
#Leap year
leapyear <- function(year)
{
if(year %% 4 == 0){
if((year %% 400 == 0) || (year %% 100 != 0)){
return(TRUE)
} else{
return(FALSE)
}
} else {
return(FALSE)
}
}
leapyear(2014)
#Working with files
even <- c(2,4,6,8,10,12,14,16,18,21)
writeEven <- function(evenN)
{
write.csv(evenN, "evens.csv")
}
writeEven(even)
getws()
getwd()
setwd("C:\Users\Administrator\Documents\GitHub\QA_R")
setwd("C:/Users/Administrator/Documents/GitHub/QA_R")
getwd()
#Working with files
even <- c(2,4,6,8,10,12,14,16,18,21)
writeEven <- function(evenN)
{
write.csv(evenN, "evens.csv")
}
writeEven(even)
readEven <- function()
{
evens <- read.csv(evens.csv, header=FALSE)
return(evens)
}
readEven()
readEven <- function()
{
evens <- read.csv("evens.csv", header=FALSE)
return(evens)
}
readEven()
readEven <- function()
{
evens <- read.csv("evens.csv", header=FALSE, "" = col_skip())
return(evens)
}
readEven()
readEven <- function()
{
evens <- read.csv("evens.csv", header=FALSE, v1 = col_skip())
return(evens)
}
readEven()
readEven <- function()
{
evens <- read.csv("evens.csv", header=FALSE, NA = col_skip())
return(evens)
}
readEven()
readEven <- function()
{
evens <- read.csv("evens.csv", header=FALSE)
return(evens)
}
readEven()
even <- c(2,4,6,8,10,12,14,16,18,20)
writeEven <- function(evenN)
{
write.csv(evenN, "evens.csv")
}
writeEven(even)
readEven <- function()
{
evens <- read.csv("evens.csv", header=FALSE)
return(evens)
}
readEven()
readEven <- function()
{
evens <- read_csv("~/GitHub/QA_R/evens.csv",col_types = cols(X1 = col_skip()))
return(evens)
}
readEven()
?read_csv
readEven <- function()
{
evens <- read_csv("~/GitHub/QA_R/evens.csv",col_types = cols(X1 = col_skip()))
print(evens[1,x])
return(evens)
}
readEven()
readEven <- function()
{
evens <- read_csv("~/GitHub/QA_R/evens.csv",col_types = cols(X1 = col_skip()))
print(evens[1,"x"])
return(evens)
}
readEven()
readEven <- function()
{
evens <- read_csv("~/GitHub/QA_R/evens.csv",col_types = cols(X1 = col_skip()))
output = c()
for(i in 1:10){
output[i] <- evens[i,"x"] + 1
}
write.csv(output, "odds.csv")
return(output)
}
readEven()
data(iris)
View(titanic)
iris
View(iris)
summary(iris)
summary(titanic)
subdata <- subset(iris, select=c(Species, Sepal.Width))
subdata
subdata <- subset(iris, select=c(Species, Sepal.Width))
plot(subdata)
install.packages("ggplot2")
subdata <- subset(iris, select=c(Species, Sepal.Width))
qplot(subdata)
library(ggplot2)
subdata <- subset(iris, select=c(Species, Sepal.Width))
qplot(subdata)
library(ggplot2)
subdata <- subset(iris, select=c(Species, Sepal.Width))
qplot(subdata[1,1], subdata[2,2])
View(iris)
View(iris)
library(ggplot2)
subdata <- subset(iris, select=c(Species, Sepal.Width))
#qplot(subdata[1,1], subdata[2,2])
qplot(iris$Species, iris$Sepal.Width)
library(ggplot2)
subdata <- subset(iris, select=c(Species, Sepal.Width))
#qplot(subdata[1,1], subdata[2,2])
qplot(iris$Species, iris$Sepal.Width, geom=boxplot("point"))
library(ggplot2)
subdata <- subset(iris, select=c(Species, Sepal.Width))
#qplot(subdata[1,1], subdata[2,2])
qplot(iris$Species, iris$Sepal.Width, geom=boxplot())
library(ggplot2)
subdata <- subset(iris, select=c(Species, Sepal.Width))
#qplot(subdata[1,1], subdata[2,2])
qplot(iris$Species, iris$Sepal.Width) + geom=boxplot()
library(ggplot2)
subdata <- subset(iris, select=c(Species, Sepal.Width))
#qplot(subdata[1,1], subdata[2,2])
ggplot(iris, aes(x = Species, y = Sepal.Width)) + geom_boxplot()
library(ggplot2)
subdata <- subset(iris, select=c(Species, Sepal.Width))
#qplot(subdata[1,1], subdata[2,2])
ggplot(iris, aes(x = Species, y = (Sepal.Width * Sepal.Length))) + geom_boxplot()
library(ggplot2)
subdata <- subset(iris, select=c(Species, Sepal.Width))
#qplot(subdata[1,1], subdata[2,2])
ggplot(iris, aes(x = Species, y = (Sepal.Width * Sepal.Length))) + geom_boxplot() + ylab="Sepal Area"
library(ggplot2)
subdata <- subset(iris, select=c(Species, Sepal.Width))
#qplot(subdata[1,1], subdata[2,2])
ggplot(iris, aes(x = Species, y = (Sepal.Width * Sepal.Length)), ylab="Sepal Area") + geom_boxplot()
library(ggplot2)
subdata <- subset(iris, select=c(Species, Sepal.Width))
#qplot(subdata[1,1], subdata[2,2])
ggplot(iris, aes(x = Species, y = (Sepal.Width * Sepal.Length), ylab="Sepal Area")) + geom_boxplot()
library(ggplot2)
subdata <- subset(iris, select=c(Species, Sepal.Width))
#qplot(subdata[1,1], subdata[2,2])
ggplot(iris, aes(x = Species, y = (Sepal.Width * Sepal.Length)), ylab="Sepal Area") + geom_boxplot() + ylab("Area")
library(ggplot2)
subdata <- subset(iris, select=c(Species, Sepal.Width))
#qplot(subdata[1,1], subdata[2,2])
ggplot(iris, aes(x = Species, y = (Sepal.Width * Sepal.Length)), ylab="Sepal Area") + ylab("Sepal Area") + geom_boxplot()
library(ggplot2)
subdata <- subset(iris, select=c(Species, Sepal.Width))
#qplot(subdata[1,1], subdata[2,2])
ggplot(iris, aes(x = Species, y = (Sepal.Width * Sepal.Length)), ylab="Sepal Area") + ylab("Sepal Area") + geom_jitter()
table(titanic$FACTOR)
table(titanic$Age)
#Titanic
library(ggplot2)
subsdead <- subset(titanic, Survived == 0, select=c(Species, Sepal.Width))
ggplot(titanic, aes(x = Age, y = (Survived), ylab="Deaths")) + xlab("Age") + geom_jitter()
table(titanic$Survived)
